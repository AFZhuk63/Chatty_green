import os
import argparse

# –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
HTML_PATH = os.path.join("templates", "home.html")
CSS_PATH = os.path.join("static", "css", "home.css")
VIEWS_FILES = [
    os.path.join("chatty", "views.py"),
    os.path.join("ads", "views.py"),
    os.path.join("posts", "views.py"),
    os.path.join("users", "views.py"),
    os.path.join("subscriptions", "views.py")
]


def insert_ad_block_to_html(ad_number, top, right):
    if not os.path.exists(HTML_PATH):
        print("[‚ùå] –§–∞–π–ª templates/home.html –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    with open(HTML_PATH, "r", encoding="utf-8") as f:
        content = f.read()

    block_id = f"ad-sidebar-{ad_number}"
    if f'id="{block_id}"' in content:
        print("[‚ö†] HTML –±–ª–æ–∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        return

    ad_html = f'''
<!-- üöÄ –ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º—ã–π —Ä–µ–∫–ª–∞–º–Ω—ã–π –±–ª–æ–∫ #{ad_number} -->
<div id="{block_id}" class="ad-sidebar ad-sidebar-{ad_number}">
  {{% include 'ads/ad_slider.html' with ad_group=ads_{ad_number} %}}
</div>
'''

    insert_point = content.rfind('{% endblock %}')
    if insert_point == -1:
        print("[‚ùå] –ë–ª–æ–∫ content –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    new_content = content[:insert_point] + "\n" + ad_html + "\n" + content[insert_point:]
    with open(HTML_PATH, "w", encoding="utf-8") as f:
        f.write(new_content)

    print(f"[‚úî] HTML –±–ª–æ–∫ #{ad_number} –¥–æ–±–∞–≤–ª–µ–Ω.")


def insert_css_block(ad_number, top, right):
    if not os.path.exists(CSS_PATH):
        print("[‚ùå] –§–∞–π–ª static/css/home.css –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    with open(CSS_PATH, "r", encoding="utf-8") as f:
        css_content = f.read()

    class_name = f".ad-sidebar-{ad_number}"
    if class_name in css_content:
        print("[‚ö†] CSS –±–ª–æ–∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        return

    css_block = f'''
/* üöÄ –°—Ç–∏–ª–∏ –¥–ª—è —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –±–ª–æ–∫–∞ #{ad_number} */
.ad-sidebar-{ad_number} {{
  position: fixed;
  top: {top}px;
  right: {right};
  width: 300px;
  max-width: 20vw;
  z-index: 500;
}}
'''

    with open(CSS_PATH, "a", encoding="utf-8") as f:
        f.write(css_block)

    print(f"[‚úî] CSS –±–ª–æ–∫ #{ad_number} –¥–æ–±–∞–≤–ª–µ–Ω.")


def update_views_context(ad_number):
    variable = f"ads_{ad_number}"

    for path in VIEWS_FILES:
        if os.path.exists(path):
            with open(path, "r", encoding="utf-8") as f:
                content = f.read()

            if variable in content:
                continue

            # –î–æ–±–∞–≤–∏–º –≤ –ø–µ—Ä–≤—ã–π def –∏–ª–∏ class (–ø—Å–µ–≤–¥–æ–ø—Ä–∏–º–µ—Ä: –≤—Å—Ç–∞–≤–∏–º –≤ context –≤ render)
            lines = content.splitlines()
            for i, line in enumerate(lines):
                if "def" in line and "home" in line:
                    indent = " " * (len(line) - len(line.lstrip()))
                    context_inserted = False
                    for j in range(i, len(lines)):
                        if "context =" in lines[j]:
                            # –î–æ–±–∞–≤–ª—è–µ–º ads_N –≤–Ω—É—Ç—Ä—å —Å–ª–æ–≤–∞—Ä—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                            if "}" in lines[j]:
                                lines[j] = lines[j].replace("}", f", '{variable}': [], }}")
                                context_inserted = True
                                break
                    if context_inserted:
                        with open(path, "w", encoding="utf-8") as f:
                            f.write("\n".join(lines))
                        print(f"[‚úî] –ö–æ–Ω—Ç–µ–∫—Å—Ç {variable} –¥–æ–±–∞–≤–ª–µ–Ω –≤ {path}")
                        return

    print("[‚ùå] –§–∞–π–ª views.py –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ—É–Ω–∫—Ü–∏—é 'home'.")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –±–ª–æ–∫–∞ —Ä–µ–∫–ª–∞–º—ã")
    parser.add_argument("block_number", type=int, help="–ù–æ–º–µ—Ä —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –±–ª–æ–∫–∞")
    parser.add_argument("--top", type=int, required=True, help="–û—Ç—Å—Ç—É–ø —Å–≤–µ—Ä—Ö—É (–≤ px)")
    parser.add_argument("--right", type=str, required=True, help="–°–º–µ—â–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 'calc(...)')")

    args = parser.parse_args()
    insert_ad_block_to_html(args.block_number, args.top, args.right)
    insert_css_block(args.block_number, args.top, args.right)
    update_views_context(args.block_number)
